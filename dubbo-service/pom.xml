<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dubbo-parent</artifactId>
        <groupId>cn.tang</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../dubbo-parent/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <packaging>jar</packaging>

    <!--在指定了parent父模块之后，子模块就继承了父模块的groupId和version-->
    <artifactId>dubbo-service</artifactId>
    <name>${project.artifactId}</name>
    <!--在继承了父模块后，下面的这些属性配置就不应该再指定了，因为已经在父模块中指定了,
    可是在下面引用的时候找不到，必须在本module里面也指定？-->
    <!--<properties>-->
    <!--<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>-->
    <!--</properties>-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <profiles.dir>src/main/profiles</profiles.dir><!--profie根目录 -->
        <maven.jar.plugin.version>3.1.1</maven.jar.plugin.version>
    </properties>

    <dependencies>
        <!--在项目lib目录下，通过maven-install-plugin插件安装到本地仓库，
        然后在使用maven-assembly-plugin插件时将依赖的jar包打到target目录
        下制定位置的lib目录下。-->
        <dependency>
            <groupId>classes12</groupId>
            <artifactId>classes12</artifactId>
            <version>1.0</version>
        </dependency>
        <!--依赖的core模块-->
        <dependency>
            <groupId>cn.tang</groupId>
            <artifactId>dubbo-core</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!--依赖的api模块-->
        <dependency>
            <groupId>cn.tang</groupId>
            <artifactId>dubbo-api</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>3.6.1.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>6.0.23.Final</version>
        </dependency>
        <!--下面若不加，启动service会报下面错误
        [ERROR] [2019-05-26 17:15:55] com.alibaba.dubbo.container.Main.main(86) |
        [DUBBO] Error creating bean with name 'validator' defined in file
        [E:\workspace\dubbo-practice\dubbo-service\target\classes\META-INF\spring\spring-dao.xml]:
        Invocation of init method failed; nested exception is javax.validation.ValidationException: HV000183:
        Unable to load 'javax.el.ExpressionFactory'. Check that you have the EL dependencies on the classpath,
         dubbo version: 2.5.3, current host: 127.0.0.1
        org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'validator' defined in file -->
        <dependency>
            <groupId>org.jboss.spec.javax.el</groupId>
            <artifactId>jboss-el-api_3.0_spec</artifactId>
            <version>1.0.0.Final</version>
        </dependency>

        <!-- mybatis 包 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.2.8</version>
        </dependency>

        <!--mybatis start -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.2.2</version>
        </dependency>
        <!--mybatis插件-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>4.1.3</version>
        </dependency>
        <dependency>
            <groupId>com.github.jsqlparser</groupId>
            <artifactId>jsqlparser</artifactId>
            <version>0.9.5</version>
        </dependency>
        <!--mybatis end -->

        <!--httpclient工具包-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.1</version>
        </dependency>

        <!--junit和spring-test测试包-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <!--将dev设置为默认激活，这个操作会将dev的文件夹设置为resources目录！-->
        <profile>
            <id>dev</id>
            <properties>
                <profile.dir>${profiles.dir}/dev</profile.dir>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>${profiles.dir}/dev</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>beta</id>
            <properties>
                <profile.dir>${profiles.dir}/beta</profile.dir>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>${profiles.dir}/beta</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>product</id>
            <properties>
                <profile.dir>${profiles.dir}/product</profile.dir>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>${profiles.dir}/product</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
    </profiles>

    <build>
        <!--决定了maven生成jar包的名称！-->
        <!--<finalName>dubbo-service</finalName>-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${profile.dir}</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <!--maven生成jar包插件-->
            <!--对编译后生成的文件进行打包，包名称默认为：artifactId-version，
            比如本例生成的jar文件：dubbo-service-1.0-SNAPSHOT.jar，jar包文件保存在target目录下-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.jar.plugin.version}</version>
                <configuration>
                    <!-- Configuration of the archiver -->
                    <archive>
                        <manifest>
                            <!--这里设置的是生成的MANIFEST.MF文件，第二项并不是生成target中的lib目录
                            target中的lib目录是在assembly插件中指定的package.xml中指定生成的！-->
                            <!-- 是否要把第三方jar放到manifest的classpath中-->
                            <addClasspath>true</addClasspath>
                            <!--生成的manifest中classpath的前缀，因为要把第三方jar放到lib目录下，所以classpath的前缀是lib/-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!--  应用的  main class  -->
                            <mainClass>cn.tang.runner.ProviderStartup</mainClass>
                        </manifest>
                    </archive>
                    <!--报红？-->
                    <!--<encoding>${project.build.sourceEncoding}</encoding>-->
                    <!--<excludes>-->
                        <!--<exclude>conf/</exclude>-->
                        <!--<exclude>META-INF/</exclude>-->
                        <!--<exclude>logback.xml</exclude>-->
                    <!--</excludes>-->
                </configuration>
            </plugin>
            <!--maven打包插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
                <!-- The configuration of the plugin -->
                <configuration>
                    <!-- Specifies the configuration file of the assembly plugin -->
                    <descriptors>
                        <descriptor>src/main/assembly/package.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assebly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 本地maven仓库插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <!--使用的maven版本默认的是2.4，这里指定2.5.2就会覆盖掉默认版本设置-->
                <version>2.5.2</version>
                <executions>
                    <!--安装外部jar包到本地仓库-->
                    <execution>
                        <id>install-external</id>
                        <phase>clean</phase>
                        <configuration>
                            <file>${project.basedir}/src/lib/classes12.jar</file>
                            <repositoryLayout>default</repositoryLayout>
                            <groupId>classes12</groupId>
                            <artifactId>classes12</artifactId>
                            <version>1.0</version>
                            <packaging>jar</packaging>
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                    </execution>
                    <!--安装apollo外部jar包到本地仓库-->
                    <execution>
                        <id>install-external-apollo-client</id>
                        <phase>clean</phase>
                        <configuration>
                            <file>../dubbo-core/src/lib/apollo-client-0.11.0-SNAPSHOT.jar</file>
                            <repositoryLayout>default</repositoryLayout>
                            <groupId>appolloclient</groupId>
                            <artifactId>appolloclient</artifactId>
                            <version>11.0</version>
                            <packaging>jar</packaging>
                            <!--在目录下生成maven-metadata-local.xml文件-->
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                    </execution>

                    <execution>
                        <id>install-external-apollo-core</id>
                        <phase>clean</phase>
                        <configuration>
                            <file>../dubbo-core/src/lib/apollo-core-0.11.0-SNAPSHOT.jar</file>
                            <repositoryLayout>default</repositoryLayout>
                            <groupId>appollocore</groupId>
                            <artifactId>appollocore</artifactId>
                            <version>11.0</version>
                            <packaging>jar</packaging>
                            <!--在目录下生成maven-metadata-local.xml文件-->
                            <generatePom>true</generatePom>
                        </configuration>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>