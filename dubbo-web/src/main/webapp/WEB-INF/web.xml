<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <display-name>dubbo-web</display-name>

    <welcome-file-list>
        <welcome-file>/static/html/index.html</welcome-file>
    </welcome-file-list>
    <!--定义不同的错误码跳转不同的错误提示页-->
    <error-page>
        <error-code>404</error-code>
        <location>/static/html/error/404.html</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/static/html/error/500.html</location>
    </error-page>
    <!--
        在web.xml中，有此加载顺序： context-param -> listener -> filter -> servlet
    但是跟在web.xml中的位置无关，tomcat会按照上面的顺序找标签，然后加载！
    -->

    <!--
        初始化过程
        在启动 Web 项目时 , web 容器 ( 比如tomcat ) 会先读取 web.xml 文件中的两个节点 <listener> 和 <context-param>
    接着容器会创建一个 ServletContext 对象 (也就是 servlet上下文 ), 这个 web 项目的所有部分都将共享这个上下文
    在第一步读取的 <context-param> 信息 , 将会转换为键值对的形式 , 并交给 servletContext 对象
    (这些键值对,会被 listener , filter 等使用到 ) 接着容器会创建 <listener> 注册的监听器对象
    -->

    <!-- 配置log4j配置文件路径 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    <!-- 60s 检测日志配置 文件变化 -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>

    <!--加载spring contextLoader-->
    <!--log4j:WARN No appenders could be found for logger
    (org.springframework.web.context.ContextLoader).
    log4j:WARN Please initialize the log4j system properly.
    在报这个问题时，把下面的配置放在log4j之后。-->
    <!--ContextLoaderListener是一个ServletContextListener, 它在你的web应用启动的时候初始化。缺省情况下，
     它会在WEB-INF/applicationContext.xml文件找Spring的配置。
     你可以通过定义一个<context-param>元素名字为”contextConfigLocation”来改变Spring配置文件的位置。示例如下：-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml
            classpath:spring-dubbo-consumer.xml
            classpath:spring-redis.xml
            classpath:spring-activeMq.xml
        </param-value>
    </context-param>

    <!-- 配置Log4j监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!-- 加载spring容器-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- 防止spring内存溢出监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <request-character-encoding>UTF-8</request-character-encoding>
    <response-character-encoding>UTF-8</response-character-encoding>

    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--浏览器 form 表单只支持 GET与 POST 请求，而DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，
    可以将这些请求转换为标准的 http 方法，使得支持 GET、POST、PUT 与DELETE 请求-->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>cacheFilter</filter-name>
        <filter-class>cn.tang.base.filter.CacheFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>cacheFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--在mvc中配置了<mvc:resources mapping="/static/**" location="/static/"/>
    静态资源访问，所以在web.xml中就不需要配置了，更加简洁！-->
    <!-- 配置静态文件访问 -->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.jpg</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.bmp</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.jpeg</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.png</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.gif</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.html</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.js</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.css</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.pdf</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.apk</url-pattern>-->
    <!--</servlet-mapping>-->
    <!--<servlet-mapping>-->
    <!--<servlet-name>default</servlet-name>-->
    <!--<url-pattern>*.wgt</url-pattern>-->
    <!--</servlet-mapping>-->

    <servlet>
        <description>dubbo-web servlet</description>
        <servlet-name>rest</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!-- 取消其自动注册的异常解析器 -->
        <!--关闭系统级别的 detectAllHandlerExceptionResolvers = false 不加载默认的那三个异常处理器
            org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver
            org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver
            org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.DefaultHandlerExceptionResolver-->
        <init-param>
            <param-name>detectAllHandlerExceptionResolvers</param-name>
            <param-value>false</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>rest</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 配置session超时时间，单位分钟 -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

</web-app>