### set log levels ###
#日志级别大小写都可以
#这里指定了INFO级别，低于INFO级别的都不会输出
log4j.rootLogger = INFO , C , D , E

### console ###
#输出日志到控制台，这里没有指定Threshold，所以日志级别应该是rootLogger指定的info
log4j.appender.C = org.apache.log4j.ConsoleAppender
log4j.appender.C.Target = System.out
log4j.appender.C.layout = org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern = [%p] [%-d{yyyy-MM-dd HH:mm:ss}] %C.%M(%L) | %m%n
log4j.appender.C.Encoding = UTF-8

### log file ###
#输出info级别日志到指定文件（文件大小到达指定尺寸的时候产生一个新的文件）
log4j.appender.D = org.apache.log4j.RollingFileAppender
#部署到tomcat中，war包在webapp下，以为../logs表示的是tomcat/logs文件夹，
#但实质上是与tomcat同级的logs目录！！！？？？如果不存在会创建。
#2019.06.27补充
#对于web模块来说，在服务器上是通过tomcat等servlet部署的，下面的路径其实就是在tomcat/logs文件夹
#示例：war包位置：/home/weblogic/dubbo-web/webapps/dubbo-web.war
#     logs位置：/home/weblogic/dubbo-web/logs
#对于在本地通过IDEA启动，logs文件夹位置同linux一致：E:\tomcat8.0\logs
log4j.appender.D.File =../logs/dubboWeb-info.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = INFO
log4j.appender.D.MaxFileSize = 80MB
log4j.appender.D.MaxBackupIndex = 20
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = [%p] [%-d{yyyy-MM-dd HH:mm:ss}] %C.%M(%L) | %m%n
log4j.appender.D.Encoding=UTF-8

### exception ###
#输出error级别日志到指定文件
#以每天一个文件输出日志
#RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#因为是ERROR级别，所以很少，每天产生一个就可以
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
#输出文件目录
log4j.appender.E.File = ../logs/dubboWeb-error.log
#消息增加到指定的文件中，false表示覆盖指定文件内容
log4j.appender.E.Append = true
#输出信息最低级别
log4j.appender.E.Threshold = ERROR
#布局为自定义布局模式
log4j.appender.E.layout = org.apache.log4j.PatternLayout
#自定义输出格式
log4j.appender.E.layout.ConversionPattern = [%p] [%-d{yyyy-MM-dd HH:mm:ss}] %C.%M(%L) | %m%n
#指定编码格式UTF-8
log4j.appender.E.Encoding=UTF-8

log4j.logger.com.ibatis=DEBUG
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG
log4j.logger.org.mybatis=DEBUG
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG
log4j.logger.java.sql.ResultSet=DEBUG

#配置根Logger，其语法为：
#log4j.rootLogger = [ level ] , appenderName, appenderName, …
#其中，level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。
# Log4j建议只使用四个级别，优 先级从高到低分别是ERROR、WARN、INFO、DEBUG。
# 通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。
# 比如在这里定 义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
# appenderName就是指B日志信息输出到哪个地方。您可以同时指定多个输出目的地。


#自定义输出格式详解：
#%p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%C: java类名，，%C{1} 输出最后一个元素
#%M: java方法名
#%L: java源码行数
#%m: 日志内容
#%n: 换行
#%r - 程序启动到现在的毫秒数
#%% - 输出‘%’
#%t - 当前线程名
#%l - 同 %F%L%C%M，即java源文件名+java类名+java方法名+java源码行数
#%F - java源文件名
