<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dubbo-parent</artifactId>
        <groupId>cn.tang</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../dubbo-parent/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>dubbo-web</artifactId>
    <!--name指的就是在右侧maven中显示的名字-->
    <name>${project.artifactId}</name>
    <!--web模块需要指定打包成war包-->
    <packaging>war</packaging>

    <properties>
        <profiles.dir>src/main/profiles</profiles.dir><!--profie根目录 -->
    </properties>

    <dependencies>
        <dependency>
            <groupId>cn.tang</groupId>
            <artifactId>dubbo-core</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>cn.tang</groupId>
            <artifactId>dubbo-api</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!--虽然引入了dubbo-core模块，但是关于junit和spring-test包仍然需要在相应要进行
        test测试的module中的pom.xml加上，否则相应模块中无法进行测试的，可能是因为scope的原因。
        已经验证，就是scope的原因，可能在某个module中将scope设置为test之后，只能在本module中
        的test域使用！-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <!--注释掉之后，就可以在web层非test域下使用junit-->
            <!--<scope>test</scope>-->
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
        <!--将dev设置为默认激活，这个操作会将dev的文件夹设置为resources目录！-->
        <profile>
            <id>dev</id>
            <properties>
                <profile.dir>${profiles.dir}/dev</profile.dir>
            </properties>
            <!--设置之后用maven Reimport之后，对应设置的目录就变成resources目录，
            但是之前true改成false的目录依然是resources目录，并没有因为改为false目录
            而取消变成resources目录，只能手动IDE将其取消，否则打包时会出问题！-->
            <build>
                <resources>
                    <resource>
                        <directory>${profiles.dir}/dev</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>beta</id>
            <properties>
                <profile.dir>${profiles.dir}/beta</profile.dir>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>${profiles.dir}/beta</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>product</id>
            <properties>
                <profile.dir>${profiles.dir}/product</profile.dir>
            </properties>
            <build>
                <resources>
                    <resource>
                        <directory>${profiles.dir}/product</directory>
                        <filtering>true</filtering>
                    </resource>
                </resources>
            </build>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
    </profiles>

    <!--原来在resources目录下建立META-INF.spring文件夹存放资源配置文件，后来将这些
    文件移出之后，将META-INF.spring文件夹删掉，发现打包的时候，在target/dubbo-web/WEB-INF/classes
    文件夹下没有生成这些资源文件。
    解决方法：①IDEA在project structure将resources目录置为非资源目录后，再将其置为资源目录。
            ②直接在下面build额外再指定一遍resources为资源目录！
    这个是IDE的问题？还是profiles标签中resources标签的原因？可是之前没删掉META-INF.spring文件夹
    的时候没有问题啊。。。
    -->
    <build>
        <finalName>dubbo-web</finalName>
        <!--由于上面已经指定打成war包了，所以这个地方不加这个插件也一样能打出war包，
        猜测是当需要排除某些内容不打入war包时使用这个插件，比如下面。-->
        <!--<plugins>-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-war-plugin</artifactId>-->
                <!--<version>2.0.2</version>-->
            <!--</plugin>-->
        <!--</plugins>-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>


</project>