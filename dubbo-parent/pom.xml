<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.tang</groupId>
    <artifactId>dubbo-parent</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jdk.version>1.8</jdk.version>
        <!--定义程序编译的开发版本-->
        <maven.compiler.plugin.version>3.7.0</maven.compiler.plugin.version>
        <!--定义源代码生成的插件版本信息-->
        <maven.source.plugin.version>3.0.0</maven.source.plugin.version>
        <!--定义所有使用的开发包版本-->
        <jsp.version>2.2</jsp.version>
        <servlet.version>3.1.0</servlet.version>
        <jstl.version>1.2</jstl.version>
        <junit.version>4.12</junit.version>
        <dubbo.version>2.5.3</dubbo.version>
        <druid.version>1.0.27</druid.version>
        <!--这个版本跟zookeeper服务所启动的版本不一定必须是一致的，
        下面定义的是3.4.14，我本机的zookeeper版本是3.4.5，一样可以启动-->
        <zookeeper.version>3.4.6</zookeeper.version>
        <!--在启动的时候报java.lang.ClassNotFoundException:org.IOItec.zkclient.exception.ZkNoNodeException
        一般就是程序包有问题，换成0.3后问题解决；马达贷0.6版本-->
        <zkclient.version>0.3</zkclient.version>
        <mybatis.version>3.4.1</mybatis.version>
        <mybatis.spring.version>1.3.0</mybatis.spring.version>
        <mysql.version>5.1.40</mysql.version>
        <logback.version>1.1.8</logback.version>
        <slf4j.version>1.7.22</slf4j.version>
        <commons.beanutils.version>1.9.3</commons.beanutils.version>
        <commons.lang3.version>3.5</commons.lang3.version>
        <net.sf.json.version>2.4</net.sf.json.version>
        <spring.version>4.3.5.RELEASE</spring.version>
        <aspectj.version>1.8.10</aspectj.version>
        <netty.version>4.1.7.Final</netty.version>
        <c3p0.version>0.9.1.2</c3p0.version>
        <javassist.version>3.21.0-GA</javassist.version>
        <mybatis.generator.version>1.3.2</mybatis.generator.version>
        <shiro.version>1.2.2</shiro.version>
        <jackson.version>2.5.0</jackson.version>
    </properties>

    <!--定义编译时的配置项-->
    <build>
        <!--决定了maven生成jar包的名字！如果在这里设置了finalName为parent，由于parent是管理
        其他的子module，且存在继承关系，所以这里设置之后，如果子module里面没有设置finalName覆盖
        这里的配置，那么所有的子module生成的jar包也是叫parent的。
        相反，如果这里不设置finalName，子module也不设置，那么默认的生成的jar包名字为
        artifactId-version，比如dubbo-core模块生成的jar包名字为dubbo-core-1.0-SNAPSHOT.jar.
        所以在parent模块不要设置finalName！！！-->
        <!--<finalName>parent</finalName>-->
        <plugins>
            <!--用于打包源文件-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-source-plugin</artifactId>-->
                <!--<version>${maven.source.plugin.version}</version>-->
                <!--&lt;!&ndash;报红&ndash;&gt;-->
                <!--&lt;!&ndash;<configuration>&ndash;&gt;-->
                    <!--&lt;!&ndash;<encoding>${jdk.version}</encoding>&ndash;&gt;-->
                <!--&lt;!&ndash;</configuration>&ndash;&gt;-->
                <!--<configuration>-->
                    <!--<attach>true</attach>-->
                <!--</configuration>-->
                <!--&lt;!&ndash;开发包排除，哪些东西不打算要&ndash;&gt;-->
                <!--&lt;!&ndash;把所有源代码中的jar排除掉？&ndash;&gt;-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>attach-sources</id>-->
                        <!--&lt;!&ndash;在mvn的package生命周期就执行源码打包工作&ndash;&gt;-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>jar</goal>-->
                        <!--</goals>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
            <!--定义Maven的编译插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <!--定义源代码的开发版本-->
                    <source>${jdk.version}</source>
                    <!--定义生成class文件的编译版本-->
                    <target>${jdk.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <modules>
        <module>../dubbo-core</module>
        <module>../dubbo-api</module>
        <module>../dubbo-service</module>
        <module>../dubbo-web</module>
    </modules>


</project>